JSX:
-Javascript XML
-It is a syntax extension for js
-jsx allows us to write HTML code in react js
-jsx all tags must be closed
-jsx compiles the html code to js
-Babel is a tool in jsx

Babel:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="a"> </div>
    <script type="text/babel">
        const element = <h1>Welcome to SRI's MMS problems</h1>
        const e = document.getElementById('a');
        const root = ReactDOM.createRoot(e);
        root.render(element);
    </script>
</body>
</html>

ex2:
    <script type="text/babel">
        const n=5
        const element = <h1>React is {n*2} times better than JS</h1>
        const e = document.getElementById('a');
        const root = ReactDOM.createRoot(e);
        root.render(element);
    </script>

Conditional Rendering:
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"> </div>
    <script type="text/babel">
        const App=()=>{
            const isLoggedIn = true;
            return(
                <div>
                    {isLoggedIn ? (<h1>Welcome back, user! </h1>):(<h1>Please Login</h1>)}
                    {isLoggedIn && <h1>You have a new notification</h1>}
                </div>
            );
        }
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App/>)
    </script>
</body>

Functions:
using a function call:
-use a function call directly using the jsx expression
<body>
    <div id="a"> </div>
    <script type="text/babel">
        function getGreeting(name){
            return `Hello ${name}! Welcome to React`
        }

        function Greeting(){
            const name = "daffa";
            return <h1> {getGreeting(name)} </h1>; 
        }

        //rendering the component
        const root = ReactDOM.createRoot(document.getElementById('a'));
        root.render(<Greeting/>);
    </script>
